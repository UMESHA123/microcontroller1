//DOWN COUNTER IN DECIMAL  


//Write an assembly language program to implement (display) an eight bit UP/DOWN decimal counter on watch window. 
MOV A,#00H	// MOVE THE IMMEDIAT ADDRESS 00H TO THE ACCUMULATER A
BACK:ACALL DELAY //WITH IN THE BACK LOOP ACALL(ABSOLUTE CALL) CALL THE DELAY FUNCTION
ADD A,#01H	// ADD THE IMMEDIAT ADDRESS TO THE ACCUMALETER CONTENT AND RESULT IS STORED IN THE ACCUMALETER A
DA A  // DECIMAL ADJESTING
JNZ BACK   // JUMP IS ACCUMALETER CONTENT NOT EQUAL TO ZERO AND REPEAT THE LOOP	, IF EQUAL TO ACCUMALETER CONTENT AND EXCUTE THE NEXT LINE
SJMP LAST	// IF BACK FUNCTION IS COMPLITED JUMP TO THE RELETIVE ADDRES IN THIS CASE LAST

DELAY:		  //DEFNITION OF DELAY FUNCTION
MOV R1,#0FFH // MOVE IMMEDIAT ADDRESS 0FFH TO THE RESITER R1
L1:MOV R2,#0FFH	 // MOVE THE IMMEDIAT ADDRESS 0FFH TO THE RESITER R2(LOOP1)
L2:MOV R3,#0FFH	// MOVE THE IMMEDIAT ADDRESS 0FFH TO THE RESITER R3 (LOOP2)
L3:DJNZ R3,L3	// DECREMENT AND JUMP TO THE RELETIVE ADDRESS IF R3 CONTENT IS NOT EQUAL TO ZERO  (JUMP TO LOOP3 ADDRESS)
DJNZ R2,L2 // DECREMENT AND JUMP TO THE RELETIVE ADDRESS(LOOP2) IF R2 CONTENT NOT EQUAL TO ZERO 
DJNZ R1,L1 // DECREMENT AND JUMP TO THE RELETIVE ADDRESS(LOOP1) IF R1 CONTENT IS NOT EQUAL TO ZERO
RET	  // RETURN THE RESULT
LAST:  // DEFNITION OF LAST FUNCTION
END		 // END THE PROGRAM



// UP COUNTER IN DECIMAL


//Write an assembly language program to implement (display) an eight bit UP/DOWN decimal counter on watch window. 
MOV A,#99H	// MOVE THE IMMEDIAT ADDRESS TO THE ACCUMULATER A
BACK:ACALL DELAY //WITH IN THE BACK LOOP ACALL(ABSOLUTE CALL) CALL THE DELAY FUNCTION
ADD A,#99H	// ADD THE IMMEDIAT ADDRESS TO THE ACCUMALETER CONTENT AND RESULT IS STORED IN THE ACCUMALETER A
DA A   // DECIMAL ADJESTING
JNZ BACK   // JUMP IS ACCUMALETER CONTENT NOT EQUAL TO ZERO AND REPEAT THE LOOP	, IF EQUAL TO ACCUMALETER CONTENT AND EXCUTE THE NEXT LINE
SJMP LAST	// IF BACK FUNCTION IS COMPLITED JUMP TO THE RELETIVE ADDRES IN THIS CASE LAST

DELAY:		  //DEFNITION OF DELAY FUNCTION
MOV R1,#0FFH // MOVE IMMEDIAT ADDRESS 0FFH TO THE RESITER R1
L1:MOV R2,#0FFH	 // MOVE THE IMMEDIAT ADDRESS 0FFH TO THE RESITER R2(LOOP1)
L2:MOV R3,#0FFH	// MOVE THE IMMEDIAT ADDRESS 0FFH TO THE RESITER R3 (LOOP2)
L3:DJNZ R3,L3	// DECREMENT AND JUMP TO THE RELETIVE ADDRESS IF R3 CONTENT IS NOT EQUAL TO ZERO  (JUMP TO LOOP3 ADDRESS)
DJNZ R2,L2 // DECREMENT AND JUMP TO THE RELETIVE ADDRESS(LOOP2) IF R2 CONTENT NOT EQUAL TO ZERO 
DJNZ R1,L1 // DECREMENT AND JUMP TO THE RELETIVE ADDRESS(LOOP1) IF R1 CONTENT IS NOT EQUAL TO ZERO
RET	  // RETURN THE RESULT
LAST:  // DEFNITION OF LAST FUNCTION
END		 // END THE PROGRAM
