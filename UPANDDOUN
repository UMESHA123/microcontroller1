// WRITE A ASSEMBLY LANGURE PROGRAM TO IMPLEMENT  AN EIGHT BIT UP AND DOWN CONTER ON WATCH WINDOWS
//UP COUNTER


MOV A,#00H  //MOVE THE IMMEDIAT ADDRESS 00H TO THE ACCUMULATER
BACK:ACALL  DELAY	//CALL THE DELAY FUNCTION
INC A //INCREMENT THE ACCUMALETER CONTENT BY 1
JNZ BACK // JUMP IF ACCUMALETER CONTENT NOT ZERO
SJMP LAST  // SMALL JUMP (AND JUMP TO THE RELETIVE ADDRESS i,e LAST)


DELAY:
MOV R1,#0FFH		//MOVE THE IMMEDIAT ADDRESS 0FFH TO THE RESITER R1
L1:MOV R2,#0FFH		//MOVE IMMEDIAT ADDRESS	0FFH TO THE RESITER R2 WITH IN THE L1
L2:MOV R3,#0FFH	 // MOVE IMMEDIAT ADDRESS TO THE RESITER R3 WITH IN THE LOOP L2
L3:DJNZ R3,L3	//DECREMENT AND JUMP IF R3 NOT EQUAL TO ZERO AND REPEAT THE L3 LOOP
DJNZ R2,L2		// DECREMENT  AND JUMP IF R2 IS NOT EQUAL TO ZERO AND REPEAT THE L2 LOOP 
DJNZ R1,L1	  // DECREMENT AND JUMP IF R1 NOT EQUAL TO ZERO AND REPEAT THE L1 LOOP
RET			// CALL  THE RETURN FUNCTION
LAST: 	   // DEFNITION OF AN LAST: ADDRESS
END		


//DOWN COUNTER


// WRITE A ASSEMBLY LANGURE PROGRAM TO IMPLEMENT  AN EIGHT BIT UP AND DOWN CONTER ON WATCH WINDOWS
MOV A,#0FFH  //MOVE THE IMMEDIAT ADDRESS 0FFH  TO THE ACCUMULATER
BACK:ACALL  DELAY	//CALL THE DELAY FUNCTION
DEC A //DECREMENT THE ACCUMALETER CONTENT  BY 1
JNZ BACK // JUMP IF ACCUMALETER CONTENT NOT ZERO
SJMP LAST  // SMALL JUMP (AND JUMP TO THE RELETIVE ADDRESS i,e LAST)


DELAY:
MOV R1,#0FFH		//MOVE THE IMMEDIAT ADDRESS 0FFH TO THE RESITER R1
L1:MOV R2,#0FFH		//MOVE IMMEDIAT ADDRESS	0FFH TO THE RESITER R2 WITH IN THE L1
L2:MOV R3,#0FFH	 // MOVE IMMEDIAT ADDRESS TO THE RESITER R3 WITH IN THE LOOP L2
L3:DJNZ R3,L3	//DECREMENT AND JUMP IF R3 NOT EQUAL TO ZERO AND REPEAT THE L3 LOOP
DJNZ R2,L2		// DECREMENT  AND JUMP IF R2 IS NOT EQUAL TO ZERO AND REPEAT THE L2 LOOP 
DJNZ R1,L1	  // DECREMENT AND JUMP IF R1 NOT EQUAL TO ZERO AND REPEAT THE L1 LOOP
RET			// CALL  THE RETURN FUNCTION
LAST: 	   // DEFNITION OF AN LAST: ADDRESS
END
